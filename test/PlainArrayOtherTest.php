<?php

require_once 'bootstrap.php';
function boolTest($res){
   $res =  $res !== false ? "TRUE" : "FALSE";
   return $res;
}
/**
 * Test class for PlainArray.
 * Generated by PHPUnit on 2011-05-06 at 21:38:33.
 */
class PlainArrayOtherTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var PlainArray
     */
    protected $object;
    public static $klass ;
	public static function setUpBeforeClass(){

	  if (is_callable('class_alias') &&  class_alias('PlainArray', 'Arr') )
    	  self::$klass = 'Arr';
	  else
		self::$klass = 'PlainArray';
	}
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */

    protected function setUp()
    {
		$klass = self::$klass;
        $this->object = new $klass;
    }
    protected function factory($is_deep=false){
	    $klass = self::$klass;
        if ($is_deep === true) $arr = self::factory_array_deep ();
        else $arr = self::factory_array ();
        $this->object = new $klass($arr);

        return $this->object;
    }
    protected static function factory_array(){
        return array("name" => "Tom", "age" => 25, "weight" => 170.5, "is_active" => true);
    }
    protected static function factory_array_deep(){
        return array("name" => "Tom", "age" => 25, "weight" => 170.5, "is_active" => true,
            "people"=>array(
                array("name" => "Michael", "height" => 70),
                array("name" => "Angela", "height" => 64)
            )
            );

    }
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

	public function testMyAlias()
	{
	  $klass = self::$klass;
	   $this->factory();
	   $this->assertInstanceOf('PlainArray', $this->object, "Aliased Class should still be a PlainArray");
	}

	public function testToSample(){
	$p = new PlainArray();
$p->first_name = 'Mike' ;  // Set first_name using magic __set()

// Get a Count
echo count($p) . "\n" ; // 1

// Get an Actual Array

$res = $p->toArray();
var_dump($res); //


// Access it Like an Array
echo  "\n" .$p[first_name] . "\n" ; // Mike

// Access it Like an Object
echo $p->first_name . "\n" ; // Mike

// Access the First Value
echo $p->first() . "\n" ; // Mike

// Access the Last Value
echo $p->last() . "\n" ; // Mike

$p['height'] = 82;

// Get a Count
echo count($p) . "\n" ; // 2

// Get an Actual Array

$res = $p->toArray();
var_dump($res); // array(1) {
                //    ["first_name"]=>
                //    string(4) "Mike",
               //     ["height"]=>
               //     int(82)
               //     }

echo "\n=====\n";
$p->print_r();
echo "\n=====\n";
echo $p->to_json(); //


echo boolTest( isset($p['first_name'] ) ) . "\n" ; // TRUE
echo boolTest( isset($p->first_name ) )  . "\n"; // TRUE
echo boolTest( isset($p->last_name ) )  . "\n"; // FALSE

echo "\n=====\n";
echo boolTest( array_key_exists('last_name',$p ) )  . "\n"; // FALSE


}

}

?>
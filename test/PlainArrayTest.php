<?php

require_once 'bootstrap.php';

/**
 * Test class for PlainArray.
 * Generated by PHPUnit on 2011-05-06 at 21:38:33.
 */
class PlainArrayTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var PlainArray
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PlainArray;
    }
    protected function factory($is_deep=false){
        if ($is_deep === true) $arr = self::factory_array_deep ();
        else $arr = self::factory_array ();
        $this->object = new PlainArray($arr);
        
        return $this->object;
    }
    protected static function factory_array(){
        return array("name" => "Tom", "age" => 25, "weight" => 170.5, "is_active" => true);
    }
    protected static function factory_array_deep(){
        return array("name" => "Tom", "age" => 25, "weight" => 170.5, "is_active" => true, 
            "people"=>array(
                array("name" => "Michael", "height" => 70),
                array("name" => "Angela", "height" => 64)
            )
            );
        
    }
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

 
    public function testOffsetUnset()
    {
        $this->factory();
        $arr = self::factory_array();
        unset($this->object['name']);
        $this->assertFalse(isset($this->object->name));
        
    }

    public function testOffsetSet()
    {  $hair = 'brown';
        // Remove the following lines when you implement this test.
        $this->object['hair'] = $hair;
        $this->assertEquals($hair, $this->object->hair);
    }

    public function testOffsetGet()
    {
        $this->factory();
        $arr = self::factory_array();
        $this->assertEquals($arr['name'], $this->object['name']);
    }

    public function testOffsetExists()
    {
        $this->factory();
        $this->assertTrue(isset($this->object['name']));
    }


    public function testCount()
    {
         $this->factory();
        $arr = self::factory_array();
        $this->assertEquals(count($arr), count($this->object));
       
    }
    
    public function testDeep(){
        $this->factory(true);
        $arr = self::factory_array_deep();
        $this->assertInstanceOf('PlainArray', $this->object->people[0]);
        //var_dump($this->object);
        
        $this->assertEquals($arr, $this->object->toArray());
        $t = array("name" => "Michael", "height" => 70);
        $this->object['peep'] = $t;
        $this->assertInstanceOf('PlainArray', $this->object->peep);
        
    }
    public function testSerialize(){
       $this->factory(true);
        $arr = self::factory_array_deep();
       
       $res = serialize($this->object);
       $obj2 = unserialize($res);
       $this->assertEquals($this->object, $obj2);
       
   }
    public function testIterator()
    {
         $this->factory();
        $arr = self::factory_array();
        foreach($this->object as $k=>$v){
            $this->assertArrayHasKey($k, $arr);
            
        }
       
    }
}
?>